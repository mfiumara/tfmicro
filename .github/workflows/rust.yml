name: Rust

on: [push, pull_request]

jobs:
  build-dev:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          echo "Using tensorflow hash:  $(git submodule status | awk '{print $1}')"
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
          cd submodules/tensorflow
          export BUILD_TYPE=debug
          sudo -E make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-registry-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-index-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-dev-target-tf-${{ env.TF_HASH }}-bd-${{ hashFiles('**/build.rs') }}-hpp-${{ hashFiles('**/tflite_wrapper.hpp') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Build
        run: |
          cargo build --verbose --features=no-c-warnings
          cargo test --verbose  --features=no-c-warnings

  build-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: textbook/git-checkout-submodule-action@2.1.1
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          echo "Using tensorflow hash:  $(git submodule status | awk '{print $1}')"
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
          cd submodules/tensorflow
          export BUILD_TYPE=debug
          sudo -E make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-registry-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-index-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-release-target-tf-${{ env.TF_HASH }}-bd-${{ hashFiles('**/build.rs') }}-hpp-${{ hashFiles('**/tflite_wrapper.hpp') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - name: Build
        run: |
          cargo build --release --verbose --features=no-c-warnings
          cargo test --release --verbose  --features=no-c-warnings

  build-stm32f0-example:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: textbook/git-checkout-submodule-action@2.1.1
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          echo "Using tensorflow hash:  $(git submodule status | awk '{print $1}')"
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
          cd submodules/tensorflow
          export BUILD_TYPE=debug
          sudo -E make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: examples/stm32f0/.cargo/registry
          key: ${{ runner.os }}-stm32f0-registry-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: examples/stm32f0/.cargo/git
          key: ${{ runner.os }}-stm32f0-index-ctoml--${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: examples/stm32f0/target
          key: ${{ runner.os }}-stm32f0-target-tf-${{ env.TF_HASH }}-bd-${{ hashFiles('**/build.rs') }}-hpp-${{ hashFiles('**/tflite_wrapper.hpp') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          target: thumbv6m-none-eabi
          override: true
      - name: Build stm32f0
        working-directory: examples/stm32f0
        run: |
          sudo apt-get install gcc-arm-none-eabi
          arm-none-eabi-g++ -v
          cargo build --verbose --target thumbv6m-none-eabi --features tfmicro/no-c-warnings -Z features=build_dep

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: textbook/git-checkout-submodule-action@2.1.1
      - uses: docker://gcc
      - name: Build tensorflow
        run: |
          sudo apt-get update -qq >/dev/null 2>&1 && sudo apt-get install -yqq xxd git
          echo "Using tensorflow hash:  $(git submodule status | awk '{print $1}')"
          echo "::set-env name=TF_HASH::$(git submodule status | awk '{print $1}')"
          cd submodules/tensorflow
          export BUILD_TYPE=debug
          sudo -E make -f tensorflow/lite/micro/tools/make/Makefile test_magic_wand_test
          sudo chmod a+rwx -R .
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-registry-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-index-ctoml-${{ hashFiles('**/Cargo.toml') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-clippy-target-tf-${{ env.TF_HASH }}-bd-${{ hashFiles('**/build.rs') }}-hpp-${{ hashFiles('**/tflite_wrapper.hpp') }}
      - uses: actions-rs/toolchain@master
        with:
          toolchain: nightly
          override: true
          components: clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets
